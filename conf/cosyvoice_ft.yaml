# set random seed, so that you may reproduce your result.
__set_seed1: !apply:random.seed [1986]
__set_seed2: !apply:numpy.random.seed [1986]
__set_seed3: !apply:torch.manual_seed [1986]
__set_seed4: !apply:torch.cuda.manual_seed_all [1986]

# fixed params
sample_rate: 32000
text_encoder_input_size: 512
llm_input_size: 1024
llm_output_size: 1024
spk_embed_dim: 192

# model params
# for all class/function included in this repo, we use !<name> or !<new> for intialization, so that user may find all corresponding class/function according to one single yaml.
# for system/third_party class/function, we do not require this.

flow: !new:MPFM.flow.flow.MaskedDiffWithXvec
    input_size: 512
    output_size: 100
    spk_embed_dim: !ref <spk_embed_dim>
    output_type: 'mel'
    vocab_size: 4096
    input_frame_rate: 50
    only_mask_loss: True
    encoder: !new:MPFM.transformer.encoder.ConformerEncoder
        output_size: 512
        attention_heads: 8
        linear_units: 2048
        num_blocks: 6
        dropout_rate: 0.1
        positional_dropout_rate: 0.1
        attention_dropout_rate: 0.1
        normalize_before: True
        input_layer: 'linear'
        pos_enc_layer_type: 'rel_pos_espnet'
        selfattention_layer_type: 'rel_selfattn'
        input_size: 512
        use_cnn_module: False
        macaron_style: False
    encoder_formant: !new:MPFM.transformer.encoder.ConformerEncoder
        output_size: 128
        attention_heads: 2
        linear_units: 512
        num_blocks: 2
        dropout_rate: 0.1
        positional_dropout_rate: 0.1
        attention_dropout_rate: 0.1
        normalize_before: True
        input_layer: 'linear'
        pos_enc_layer_type: 'rel_pos_espnet'
        selfattention_layer_type: 'rel_selfattn'
        input_size: 100
        use_cnn_module: False
    encoder_pitch: !new:MPFM.transformer.encoder.ConformerEncoder
        output_size: 128
        attention_heads: 1
        linear_units: 512
        num_blocks: 2
        dropout_rate: 0.1
        positional_dropout_rate: 0.1
        attention_dropout_rate: 0.1
        normalize_before: True
        input_layer: 'linear'
        pos_enc_layer_type: 'rel_pos_espnet'
        selfattention_layer_type: 'rel_selfattn'
        input_size: 200
        use_cnn_module: False
    length_regulator: !new:MPFM.flow.length_regulator.InterpolateRegulator
        channels: 100
        sampling_ratios: [1, 1, 1, 1]
    decoder: !new:MPFM.flow.flow_matching.ConditionalCFM
        in_channels: 300
        n_spks: 1
        spk_emb_dim: 100
        cfm_params: !new:omegaconf.DictConfig
            content:
                sigma_min: 1e-06
                solver: 'euler'
                t_scheduler: 'cosine'
                training_cfg_rate: 0.2
                inference_cfg_rate: 0.7
                reg_loss_type: 'l1'
        estimator: !new:MPFM.flow.estimator.Decoder
            hidden_channels: 400
            out_channels: 100
            filter_channels: 512
            dropout: 0.1
            n_layers: 16
            n_heads: 4
            kernel_size: 3
            gin_channels: 100


# processor functions
parquet_opener: !name:MPFM.dataset.processor.parquet_opener
get_tokenizer: !name:whisper.tokenizer.get_tokenizer
    multilingual: True
    num_languages: 100
    language: 'en'
    task: 'transcribe'
allowed_special: 'all'
tokenize: !name:MPFM.dataset.processor.tokenize
    get_tokenizer: !ref <get_tokenizer>
    allowed_special: !ref <allowed_special>
filter: !name:MPFM.dataset.processor.filter
    max_length: 40960
    min_length: 0
    token_max_length: 200
    token_min_length: 1
resample: !name:MPFM.dataset.processor.resample
    resample_rate: !ref <sample_rate>
feat_extractor: !name:matcha.utils.audio.mel_spectrogram
    n_fft: 1024
    num_mels: 100
    sampling_rate: !ref <sample_rate>
    hop_size: 320
    win_size: 1024
    fmin: 40
    fmax: 16000
    center: False
compute_fbank: !name:MPFM.dataset.processor.compute_fbank
    feat_extractor: !ref <feat_extractor>
parse_embedding: !name:MPFM.dataset.processor.parse_embedding
    normalize: True
shuffle: !name:MPFM.dataset.processor.shuffle
    shuffle_size: 1000
sort: !name:MPFM.dataset.processor.sort
    sort_size: 500  # sort_size should be less than shuffle_size
batch: !name:MPFM.dataset.processor.batch
#    batch_type: 'static'
#    batch_size: 8
    batch_type: 'dynamic'
    max_frames_in_batch: 10000
padding: !name:MPFM.dataset.processor.padding
    use_spk_embedding: True # change to True during sft

# dataset processor pipeline
data_pipeline: [
    !ref <parse_embedding>,
    !ref <shuffle>,
    !ref <sort>,
    !ref <batch>,
    !ref <padding>,
]
# train conf
train_conf:
    optim: adam
    optim_conf:
        lr: 0.0001 # change to 1e-5 during sft
    #scheduler: constantlr # change to constantlr during sft
    scheduler: constantlr
    scheduler_conf:
        warmup_steps: 2500
    max_epoch: 50
    grad_clip: 5
    accum_grad: 2
    log_interval: 100
    save_per_step: -1